//{ Driver Code Starts
// Initial template for C++

#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function template in C++

// Read the question again , we are given that we first to find maximum no. of pages given to the students 
// And then find the minimum of it.
// Approach is simple , just need to create isValid function .


class Solution
{

public:
    // Function to check if its valid
    
    // Its the function for checking if the no. of students 'k' are getting at least one book or not
    bool isValid(int *arr, int n, int k, int max)
    {

// sort(arr , arr+n , greater<int>());
// The code will only work if the given array is sorted , in input test cases we are given sorted array
// Thats why we don't need to sort it

        int student = 1;
        int sum = 0;

        for (int i = 0; i < n; i++)
        {

            sum = sum + arr[i];

            if (sum > max)
            {

                student++;
                sum = arr[i];
            }
        }

        if (student > k)
        {

            return false;
        }

        return true;
    }

public:
    // Function to find minimum number of pages.
    int findPages(int arr[], int n, int k)
    {
        
        // If no. of book are less than the no. of students , then surely it should return false
        // AS all won't get atleast one book.
        if(n<k){
            
            return -1;
        }
        

        int res = -1;
// we will start from maximum , our ans cannot be less than the max element 
        int start = *max_element(arr, arr + n);
// Sum of array
        int end = accumulate(arr, arr + n, 0);

        while (start <= end)
        {

            int mid = start + (end - start) / 2;

            if (isValid(arr, n, k, mid) == true)
            {

                res = mid;
                end = mid - 1;
            }

            else
            {
                start = mid + 1;
            }
        }

        return res;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        int A[n];
        for(int i=0;i<n;i++){
            cin>>A[i];
        }
        int m;
        cin>>m;
        Solution ob;
        cout << ob.findPages(A, n, m) << endl;
    }
    return 0;
}

// } Driver Code Ends
