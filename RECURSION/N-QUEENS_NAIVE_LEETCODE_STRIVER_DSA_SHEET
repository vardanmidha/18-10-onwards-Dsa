// https://leetcode.com/problems/n-queens/


// problem statement
// The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

// Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

// Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

class Solution
{

public:
    bool isSafe(int row, int col, int n, vector<string> &board)
    {

        int drow = row;
        int dcol = col;

        while (row >= 0 && col >= 0)
        {
            

            if (board[row][col] == 'Q')
            {
                return false;
            }

            col--;
            row--;
        }

        row = drow;
        col = dcol;

        while (col >= 0 && row >= 0)
        {

            if (board[row][col] == 'Q')
            {
                return false;
            }
            col--;
        }

        row = drow;
        col = dcol;

        while (row < n && col >= 0)
        {

            if (board[row][col] == 'Q')
            {
                return false;
            }

            row++;
            col--;
        }

        return true;
    }

public:
    void solve(int col, int n, vector<string> &board, vector<vector<string>> &ans)
    {

        if (col >= n)
        {
            ans.push_back(board);

            return;
        }

        for (int row = 0; row < n; row++)
        {

            if (isSafe(row, col, n, board))
            {

                board[row][col] = 'Q';

                solve(col + 1, n, board, ans);
// BACKTRACKING BELOW
                board[row][col] = '.';
            }
        }
    }

public:
    vector<vector<string>> solveNQueens(int n)
    {

        vector<vector<string>> ans;

        vector<string> board(n);

        string s(n , '.');

        for (int i = 0; i < n; i++)
        {
            board[i] = s;
        }

        solve(0, n, board, ans);

        return ans;
    }
};
