/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

//  Approach -------1 T.c- O(N^2)
// class Solution {
// public:


// int height(TreeNode *root){


// if(root==NULL){
//     return 0;
// }

// return 1 + max(height(root->left) , height(root->right));





// }

//     bool isBalanced(TreeNode* root) {
        
// if(root==NULL){
//     return true;
// }




// int lh = height(root->left);
// int rh = height(root->right);


// if(abs(lh-rh)>1){
//     return false;
// }

// bool lans = isBalanced(root->left);
// bool rans = isBalanced(root->right);


// return lans && rans;

//     }
// };

// Approach ---------2(Efficient)

class Solution {
    int depth(TreeNode* root, bool &balanced)
    {
        if(not balanced or not root)
            return 0; // anything goes for not balanced
        int dl = depth(root->left, balanced); 
        int dr = depth(root->right, balanced);
        if(abs(dl - dr) > 1)
        {
            balanced = false;
            return 0;
        }
        return 1 + max(dl, dr);
    }
public:
    bool isBalanced(TreeNode* root) {
        bool res = true;
        depth(root, res);
        return res;
    }
};


// Approach 3-- By making pair class 
// T.C = O(N)


/*class Balanced
{
public:
    int height;
    bool answer;
};

Balanced *isBalancedHelper(BinaryTreeNode<int> *root)
{
    if (root == NULL)
    {
        Balanced *p = new Balanced;
        p->height = 0;
        p->answer = true;
        return p;
    }

    Balanced *left_answer = isBalancedHelper(root->left);
    Balanced *right_answer = isBalancedHelper(root->right);

    bool flag;

    if ((!left_answer->answer) || (!right_answer->answer) || (abs(left_answer->height - right_answer->height) > 1))
    {
        flag = false;
    }
    else
    {
        flag = true;
    }

    Balanced *output = new Balanced;
    output->height = max(left_answer->height, right_answer->height) + 1;
    output->answer = flag;

    return output;
}

bool isBalanced(BinaryTreeNode<int> *root)
{
    if (root == NULL)
    {
        return true;
    }
    return isBalancedHelper(root)->answer;
}*/
