/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//  Approach 1----------O(N^2)

// class Solution {
// public:
    
    
    
//     int height(TreeNode *root){
        
//         if(root==NULL){
//             return 0;
//         }
        
//         return 1 + max(height(root->left) , height(root->right));
//     }
    
    
//     int diameterOfBinaryTree(TreeNode* root) {
        
//         if(root==NULL){
//             return 0;
//         }
        
//         int ans =0;
//         int lh = height(root->left);
//         int rh = height(root->right);
        

//         // ans = max(ans , lh+rh);
        
//         return max(lh+rh , max(diameterOfBinaryTree(root->left) , diameterOfBinaryTree( root->right)) );
        
        
        
//     }
// };



// Approach 2------- O(N) (Striver)
// We will check for every node lh+rh , and create a variable ans which stores maximum in it , which is our result.

// class Solution {

// public:

// int helper(TreeNode*root , int &ans){

// if(root==NULL)
// return 0;


// int lh = helper(root->left , ans);
// int rh = helper(root->right , ans);

// ans = max(ans , lh+rh);


// return 1 + max(lh , rh);
// }

// public:
    
        
//     int diameterOfBinaryTree(TreeNode* root) {


//     if(root==NULL)
//     return 0;    
    

//     int ans =0;
//         // We are calling the int function without storing it in int , because we only need ans which we have passed , pass by reference.

//     helper(root , ans);    
        
//         return ans;
//     }
// };




// Approach 3--------O(N) (Coding Ninjas)
// We will make a pair class and ask the function to return both height and diameter simultaneously. 
// It will reduce the T.C to O(N); 
// Just assume recursion will do its work , don't ever doubt recursion.
// Pair class can be used on many questions remember it

class Solution {


pair<int , int> getHeightandDiameter(TreeNode*root){



if(root==NULL){

pair<int , int> p;
p.first =0;
p.second =0;

return p;
}


pair<int , int> left = getHeightandDiameter(root->left);
pair<int , int> right = getHeightandDiameter(root->right);


int lheight = left.first;
int ldiameter =left.second;

int rheight = right.first;
int rdiameter =right.second;


pair<int , int> p;

p.first = 1 + max(lheight , rheight);

p.second = max( lheight + rheight , max(ldiameter , rdiameter));

return p;

}




public:
    

    
    int diameterOfBinaryTree(TreeNode* root) {
    
    pair<int , int> ans = getHeightandDiameter(root);
        
        return ans.second;
    }
};
